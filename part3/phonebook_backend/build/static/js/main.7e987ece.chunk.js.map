{"version":3,"sources":["component/Filter.js","services/persons.js","component/PersonForm.js","component/Persons.js","component/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","persons","useState","filterPersons","setNewPersons","onChange","event","filter","person","name","toLowerCase","includes","target","value","map","key","number","baseUrl","axios","get","newPerson","post","id","delete","put","PersonForm","setPersons","setNotification","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","sameName","find","window","alert","confirm","personService","then","response","data","message","type","setTimeout","concat","Person","onClick","catch","error","Persons","Notification","notification","className","App","useEffect","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7e987ece.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Filter = ({ persons }) => {\r\n  const [filterPersons, setNewPersons] = useState([]);\r\n  const handleFilterPersons = (event) => {\r\n    setNewPersons(\r\n      persons.filter((person) =>\r\n        person.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      filter shown with <input onChange={handleFilterPersons} />\r\n      {filterPersons.map((person) => (\r\n        <p key={person.name}>\r\n          {person.name} {person.number}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import axios from \"axios\";\r\nconst baseUrl = \"http://localhost:3001/api/persons\";\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = (newPerson) => {\r\n  return axios.post(baseUrl, newPerson);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`);\r\n};\r\n\r\nconst update = (person, id) => {\r\n  return axios.put(`${baseUrl}/${id}`, person);\r\n};\r\n\r\nexport default { getAll, create, remove, update };\r\n","import React, { useState } from \"react\";\r\nimport personService from \"../services/persons\";\r\n\r\nconst PersonForm = ({ persons, setPersons, setNotification }) => {\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n    const newPerson = { name: newName, number: newNumber };\r\n\r\n    const sameName = persons.find((person) => person.name === newName);\r\n    if (sameName) {\r\n      window.alert(`${newName} is already added to phonebook`);\r\n    }\r\n    if (sameName) {\r\n      if (\r\n        window.confirm(\r\n          `${sameName.name} is already added to phonebook,replace the old number with a new one?`\r\n        )\r\n      ) {\r\n        personService\r\n          .update({ ...sameName, number: newNumber }, sameName.id)\r\n          .then((response) => {\r\n            setPersons(\r\n              persons.map((person) =>\r\n                person.number !== newNumber ? person : response.data\r\n              )\r\n            );\r\n          });\r\n\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n        setNotification({\r\n          message: `updated phone number of ${sameName.name}`,\r\n          type: \"success\",\r\n        });\r\n        setTimeout(() => setNotification(null), 5000);\r\n      }\r\n    } else {\r\n      personService.create(newPerson).then((response) => {\r\n        setPersons(persons.concat(response.data));\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n        setNotification({\r\n          message: `Added ${newPerson.name}`,\r\n          type: \"success\",\r\n        });\r\n        setTimeout(() => setNotification(null), 5000);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={addPerson}>\r\n        <div>\r\n          name: <input value={newName} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n          number: <input value={newNumber} onChange={handleNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\nimport personService from \"../services/persons\";\r\n\r\nconst Person = ({ person, setPersons, setNotification }) => {\r\n  const handleDeletePerson = (event) => {\r\n    if (window.confirm(`Delete ${person.name}?`)) {\r\n      personService\r\n        .remove(person.id)\r\n        .then((response) => {\r\n          setNotification({\r\n            message: `Deleted ${person.name}`,\r\n            type: \"success\",\r\n          });\r\n          setTimeout(() => setNotification(null), 5000);\r\n        })\r\n        .catch((error) => {\r\n          setNotification({\r\n            message: `Information of ${person.name} has already been removed from server`,\r\n            type: \"error\",\r\n          });\r\n        });\r\n      personService.getAll().then((response) => {\r\n        setPersons(response.data);\r\n      });\r\n      setTimeout(() => setNotification(null), 5000);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        {person.name}\r\n        {person.number}\r\n        <button onClick={handleDeletePerson}>delete</button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Persons = ({ persons, setPersons, setNotification }) => {\r\n  return (\r\n    <div>\r\n      {persons.map((person) => (\r\n        <Person\r\n          key={person.name}\r\n          person={person}\r\n          setPersons={setPersons}\r\n          setNotification={setNotification}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Persons;\r\n","import React from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst Notification = ({ notification }) => {\r\n  if (notification === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className={notification.type}>{notification.message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useEffect } from \"react\";\nimport Filter from \"./component/Filter\";\nimport PersonForm from \"./component/PersonForm\";\nimport Persons from \"./component/Persons\";\nimport personService from \"./services/persons\";\nimport Notification from \"./component/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [notification, setNotification] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((response) => {\n      setPersons(response.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      <h2>phonebook</h2>\n      <Notification notification={notification} />\n      <Filter persons={persons} />\n      <h2>add a new</h2>\n      <PersonForm\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        setPersons={setPersons}\n        setNotification={setNotification}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}